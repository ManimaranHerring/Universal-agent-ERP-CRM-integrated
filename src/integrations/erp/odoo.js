// Minimal Odoo JSON-RPC helpers (create/update Quote as sale.order)
const fetch = global.fetch;


async function jsonrpc(method, params) {
const url = `${process.env.ODOO_URL}/jsonrpc`;
const payload = { jsonrpc: '2.0', method: 'call', id: Date.now(), params };
const res = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });
const data = await res.json();
if (data.error) throw new Error(JSON.stringify(data.error));
return data.result;
}


async function execute_kw(model, method, args=[], kwargs={}) {
return jsonrpc('call', {
service: 'object',
method: 'execute_kw',
args: [process.env.ODOO_DB, 1, process.env.ODOO_PASSWORD, model, method, args, kwargs]
});
}


function mapQuoteToSaleOrder(quote){
return {
partner_id: 1, // demo: customer ID
currency_id: undefined, // pick by code if needed
validity_date: quote.validity_date,
note: `Generated by Universal Agent` ,
order_line: quote.line_items.map(li => [0,0,{ name: `${li.sku} ${li.description}`, product_uom_qty: li.qty, price_unit: li.unit_price }])
};
}


module.exports = {
async upsertQuote(quote){
const vals = mapQuoteToSaleOrder(quote);
// Demo: always create; real impl: search_read + write if exists
const id = await execute_kw('sale.order','create',[vals]);
return { provider: 'odoo', object: 'sale.order', id };
},
async upsertItems(items){ /* map to product.product; left as exercise */ },
async upsertPO(po){ /* map to purchase.order; left as exercise */ }
};
